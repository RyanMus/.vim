let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
map <buffer> <silent> \s :call PdbSaveSavedBreakpoints()
map <buffer> <silent> \l :call PdbLoadSavedBreakpoints()
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
let s:cpo_save=&cpo
set cpo&vim
map <buffer> <silent> <F12> :call PdbPrintStackTrace()
map <buffer> <silent> <C-F3> :call PdbExecStatement()
map <buffer> <silent> <F3> :call PdbEvalExpression()
map <buffer> <silent> <C-F4> :call PdbEvalCurrentWORD()
map <buffer> <silent> <F4> :call PdbEvalCurrentWord()
map <buffer> <silent> <F11> :call PdbPrintBreakpointConditionOnCurrentLine()
map <buffer> <silent> <M-C-S-F2> :call PdbClearAllBreakpoints()
map <buffer> <silent> <C-S-F2> :call PdbClearAllBreakpointsInCurrentFile()
map <buffer> <silent> <S-F2> :call PdbToggleTemporaryBreakpointOnCurrentLine()
map <buffer> <silent> <C-F2> :call PdbToggleConditionalBreakpointOnCurrentLine()
map <buffer> <silent> <F2> :call PdbToggleBreakpointOnCurrentLine()
map <buffer> <silent> <C-F6> :call PdbJumpToCurrentLine()
map <buffer> <silent> <F6> :call PdbSetFocusToCurrentDebugLine()
map <buffer> <silent> <F10> :call PdbMoveDownInStackFrame()
map <buffer> <silent> <F9> :call PdbMoveUpInStackFrame()
map <buffer> <silent> <C-F8> :call PdbContinueUntilReturn()
map <buffer> <silent> <F8> :call PdbStepOver()
map <buffer> <silent> <F7> :call PdbStepInto()
map <buffer> <silent> <M-C-S-F5> :call PdbRestartDebug()
map <buffer> <silent> <S-F5> :call PdbStopDebug()
map <buffer> <silent> <C-S-F5> :call PdbStartDebugWithArguments()
map <buffer> <silent> <C-F5> :call PdbStartDebug(0, [])
map <buffer> <silent> <F5> :call PdbStartDebug(1, [])
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 330 - ((16 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
330
normal! 010l
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
